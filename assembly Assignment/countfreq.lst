


ARM Macro Assembler    Page 1 


    1 00000000         ; Standard definitions of Mode bits and Interrupt (I & F
                       ) flags in PSRs
    2 00000000         
    3 00000000 00000010 
                       Mode_USR
                               EQU              0x10
    4 00000000 00000011 
                       Mode_FIQ
                               EQU              0x11
    5 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
    6 00000000 00000013 
                       Mode_SVC
                               EQU              0x13
    7 00000000 00000017 
                       Mode_ABT
                               EQU              0x17
    8 00000000 0000001B 
                       Mode_UND
                               EQU              0x1B
    9 00000000 0000001F 
                       Mode_SYS
                               EQU              0x1F
   10 00000000         
   11 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   12 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   13 00000000         
   14 00000000         
   15 00000000         ;// <h> Stack Configuration (Stack Sizes in Bytes)
   16 00000000         ;//   <o0> Undefined Mode      <0x0-0xFFFFFFFF:8>
   17 00000000         ;//   <o1> Supervisor Mode     <0x0-0xFFFFFFFF:8>
   18 00000000         ;//   <o2> Abort Mode          <0x0-0xFFFFFFFF:8>
   19 00000000         ;//   <o3> Fast Interrupt Mode <0x0-0xFFFFFFFF:8>
   20 00000000         ;//   <o4> Interrupt Mode      <0x0-0xFFFFFFFF:8>
   21 00000000         ;//   <o5> User/System Mode    <0x0-0xFFFFFFFF:8>
   22 00000000         ;// </h>
   23 00000000         
   24 00000000 00000000 
                       UND_Stack_Size
                               EQU              0x00000000
   25 00000000 00000080 
                       SVC_Stack_Size
                               EQU              0x00000080
   26 00000000 00000000 
                       ABT_Stack_Size
                               EQU              0x00000000
   27 00000000 00000000 
                       FIQ_Stack_Size
                               EQU              0x00000000
   28 00000000 00000080 
                       IRQ_Stack_Size
                               EQU              0x00000080
   29 00000000 00000000 
                       USR_Stack_Size



ARM Macro Assembler    Page 2 


                               EQU              0x00000000
   30 00000000         
   32 00000000 00000100 
                       ISR_Stack_Size
                               EQU              (UND_Stack_Size + SVC_Stack_Siz
e + ABT_Stack_Size +                           FIQ_Stack_Size + IRQ_Stack_Size
)
   33 00000000         
   34 00000000                 AREA             RESET, CODE
   35 00000000                 ENTRY
   36 00000000         ;  Dummy Handlers are implemented as infinite loops whic
                       h can be modified.
   37 00000000         
   38 00000000 E59FF020 
                       Vectors LDR              PC, Reset_Addr
   39 00000004 E59FF020        LDR              PC, Undef_Addr
   40 00000008 E59FF020        LDR              PC, SWI_Addr
   41 0000000C E59FF020        LDR              PC, PAbt_Addr
   42 00000010 E59FF020        LDR              PC, DAbt_Addr
   43 00000014 E1A00000        NOP                          ; Reserved Vector 
   44 00000018 E51FF008        LDR              PC, IRQ_Addr
   45 0000001C         ;               LDR     PC, [PC, #-0x0FF0]     ; Vector 
                       from VicVectAddr
   46 0000001C E59FF01C        LDR              PC, FIQ_Addr
   47 00000020         
   48 00000020 00000000 
                       ACBASE  DCD              P0COUNT
   49 00000024 00000000 
                       SCONTR  DCD              SIMCONTROL
   50 00000028         
   51 00000028 00000000 
                       Reset_Addr
                               DCD              Reset_Handler
   52 0000002C 00000000 
                       Undef_Addr
                               DCD              Undef_Handler
   53 00000030 00000000 
                       SWI_Addr
                               DCD              SWI_Handler
   54 00000034 00000000 
                       PAbt_Addr
                               DCD              PAbt_Handler
   55 00000038 00000000 
                       DAbt_Addr
                               DCD              DAbt_Handler
   56 0000003C 00000000        DCD              0           ; Reserved Address 
                                                            
   57 00000040 00000000 
                       FIQ_Addr
                               DCD              FIQ_Handler
   58 00000044         
   59 00000044 EAFFFFFE 
                       Undef_Handler
                               B                Undef_Handler
   60 00000048 EAFFFFFE 
                       SWI_Handler
                               B                SWI_Handler
   61 0000004C EAFFFFFE 
                       PAbt_Handler



ARM Macro Assembler    Page 3 


                               B                PAbt_Handler
   62 00000050 EAFFFFFE 
                       DAbt_Handler
                               B                DAbt_Handler
   63 00000054 EAFFFFFE 
                       FIQ_Handler
                               B                FIQ_Handler
   64 00000058         
   65 00000058         
   66 00000058                 AREA             ARMuser, CODE,READONLY
   67 00000000         
   68 00000000 00000000 
                       IRQ_Addr
                               DCD              ISR_FUNC1
   69 00000004 00000010 
                       EINT2   EQU              16
   70 00000004 FFFFF010 
                       Addr_VicIntEn
                               DCD              0xFFFFF010  ; set to (1<<EINT0)
                                                            
   71 00000008 E01FC148 
                       Addr_EXTMODE
                               DCD              0xE01FC148  ; set to 1
   72 0000000C E002C000 
                       Addr_PINSEL0
                               DCD              0xE002C000  ; set to 2_1100
   73 00000010 E01FC140 
                       Addr_EXTINT
                               DCD              0xE01FC140
   74 00000014         
   75 00000014         ;  addresses of two registers that allow faster input
   76 00000014         
   77 00000014 E0028000 
                       Addr_IOPIN
                               DCD              0xE0028000
   78 00000018         
   79 00000018         
   80 00000018         ; Initialise the Interrupt System
   81 00000018         ;  ...
   82 00000018 E82D0003 
                       ISR_FUNC1
                               STMED            R13!, {R0,R1}
   83 0000001C E3A00004        MOV              R0, #(1 << 2) ; bit 2 of EXTINT
                                                            
   84 00000020 E51F1018        LDR              R1, Addr_EXTINT
   85 00000024 E5810000        STR              R0, [R1]    ; EINT2 reset inter
                                                            rupt
   86 00000028 E9BD0003        LDMED            R13!, {R0,R1}
   87 0000002C EA000080        B                ISR_FUNC
   88 00000030         
   89 00000030         Reset_Handler
   90 00000030         ; PORT0.1 1->0 triggers EINT0 IRQ interrupt
   91 00000030 E3A00801        MOV              R0, #(1 << EINT2)
   92 00000034 E51F1038        LDR              R1, Addr_VicIntEn
   93 00000038 E5810000        STR              R0, [R1]
   94 0000003C E3A00101        MOV              R0, #(1 << 30)
   95 00000040 E51F103C        LDR              R1, Addr_PINSEL0
   96 00000044 E5810000        STR              R0, [R1]
   97 00000048 E3A00004        MOV              R0, #(1 << 2)



ARM Macro Assembler    Page 4 


   98 0000004C E51F104C        LDR              R1, Addr_EXTMODE
   99 00000050 E5810000        STR              R0, [R1]
  100 00000054         
  101 00000054         ;  Setup Stack for each mode
  102 00000054         
  103 00000054 E59F0200        LDR              R0, =Stack_Top
  104 00000058         
  105 00000058         ;  Enter Undefined Instruction Mode and set its Stack Po
                       inter
  106 00000058 E321F0DB        MSR              CPSR_c, #Mode_UND:OR:I_Bit:OR:F
_Bit
  107 0000005C E1A0D000        MOV              SP, R0
  108 00000060 E2400000        SUB              R0, R0, #UND_Stack_Size
  109 00000064         
  110 00000064         ;  Enter Abort Mode and set its Stack Pointer
  111 00000064 E321F0D7        MSR              CPSR_c, #Mode_ABT:OR:I_Bit:OR:F
_Bit
  112 00000068 E1A0D000        MOV              SP, R0
  113 0000006C E2400000        SUB              R0, R0, #ABT_Stack_Size
  114 00000070         
  115 00000070         ;  Enter FIQ Mode and set its Stack Pointer
  116 00000070 E321F0D1        MSR              CPSR_c, #Mode_FIQ:OR:I_Bit:OR:F
_Bit
  117 00000074 E1A0D000        MOV              SP, R0
  118 00000078 E2400000        SUB              R0, R0, #FIQ_Stack_Size
  119 0000007C         
  120 0000007C         ;  Enter IRQ Mode and set its Stack Pointer
  121 0000007C E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
  122 00000080 E1A0D000        MOV              SP, R0
  123 00000084 E2400080        SUB              R0, R0, #IRQ_Stack_Size
  124 00000088         
  125 00000088         ;  Enter Supervisor Mode and set its Stack Pointer
  126 00000088 E321F053        MSR              CPSR_c, #Mode_SVC:OR:F_Bit
  127 0000008C E1A0D000        MOV              SP, R0
  128 00000090 E2400080        SUB              R0, R0, #SVC_Stack_Size
  129 00000094 EA000002        B                START
  130 00000098         ;----------------------------DO NOT CHANGE ABOVE THIS CO
                       MMENT--------------------------------
  131 00000098         ;-------------------------------------------------------
                       -------------------------------------
  132 00000098         ;-------------------------------------------------------
                       -------------------------------------
  133 00000098         
  134 00000098         
  135 00000098         ;*******************************************************
                       *********************************** 
  136 00000098         ; Author: Patrick Engelbert 
  137 00000098         ; Purpose: Count the changes from 0 to 1 for 4 different
                        frequencies up to maximum of 200 000 repetitions
  138 00000098         ; Date: January 2014
  139 00000098         ; Code overview: 
  140 00000098         ;     My code works by using a BIC intruction to detect 
                       changes from a 0 to a 1 in the input pins.
  141 00000098         ;     The code counts all 4 values in parallel using 8 b
                       its and uses the 8th bit of each count as a form of carr
                       y flag
  142 00000098         ;     When the count reaches 0b10000000, the overflow in
                       tructions are executed to stop errors



ARM Macro Assembler    Page 5 


  143 00000098         ;     The code uses 3 registers (18 bits) to be able to 
                       fit the value 200 000 which is the maximum required
  144 00000098         ;*******************************************************
                       *********************************** 
  145 00000098         
  146 00000098         
  147 00000098         
  148 00000098 E01FC1A0 
                       SCS_REGISTER
                               DCD              0xE01FC1A0  ;Status Memory addr
                                                            ess
  149 0000009C 3FFFC010 
                       FIOMASK DCD              0x3FFFC010  ;FP0xMASK Memory ad
                                                            dress
  150 000000A0 3FFFC014 
                       FIOPIN  DCD              0x3FFFC014  ;FIO0PIN Memory add
                                                            ress
  151 000000A4         
  152 000000A4         
  153 000000A4         
  154 000000A4 E3A01001 
                       START   MOV              R1,  #0x00000001
  155 000000A8 E59FB1B0        LDR              R11, =0xFEFEFEFE ;As FIOMASK is
                                                             active low, this w
                                                            ill cause the input
                                                            s to only show inpu
                                                            t bits 0, 8, 16, 24
                                                            
  156 000000AC E51FA01C        LDR              R10, SCS_REGISTER ;Set Status r
                                                            egister to use GPIO
                                                             input rather than 
                                                            standard IO registe
                                                            r
  157 000000B0 E59A0000        LDR              R0, [R10]   ;This will allow me
                                                             to use a bit mask 
                                                            instruction while l
                                                            oading, removing th
                                                            e bit mask in the l
                                                            oop
  158 000000B4 E1800001        ORR              R0,  R0, R1 ;I do not know what
                                                             is in the Status r
                                                            egister so I only w
                                                            ish to change bit 0
                                                             to 1
  159 000000B8 E58A0000        STR              R0, [r10]
  160 000000BC E51FA028        LDR              R10, FIOMASK ;Set FIOMASK with 
                                                            the required mask
  161 000000C0 E1A0000B        MOV              R0,  R11
  162 000000C4 E58A0000        STR              R0, [r10]
  163 000000C8         
  164 000000C8         
  165 000000C8         
  166 000000C8 E59F1194        LDR              R1, =0x11111111 ;Set to this va
                                                            lue so when the bic
                                                             command I operted 
                                                            on it, the output w
                                                            ill be 0x00000000
  167 000000CC E3A04000        MOV              R4, #0x00000000 
                                                            ;count, bits 0-6



ARM Macro Assembler    Page 6 


  168 000000D0 E3A05000        MOV              R5, #0x00000000 
                                                            ;count, bit 7-14
  169 000000D4 E59F718C        LDR              R7, =0x01010101 ;The starting s
                                                            tates of all of the
                                                             inputs, they all s
                                                            tart high
  170 000000D8 E3A08000        MOV              R8, #0x00000000 
                                                            ;count, bit 15-23
  171 000000DC E59F9184        LDR              R9, =0x01010101 ;a bit mask to 
                                                            get only the input 
                                                            bits as the rest co
                                                            uld be any value
  172 000000E0 E51FA048        LDR              R10, FIOPIN ;The address of the
                                                             input memory locat
                                                            ion, which uses the
                                                             GPIO Input rather 
                                                            than the standard i
                                                            nput
  173 000000E4 E59FB180        LDR              R11, =0x7F7F7F7F ;A bit mask to
                                                             get rid of the ove
                                                            rflow bit
  174 000000E8         
  175 000000E8         
  176 000000E8         
  177 000000E8         
  178 000000E8         ;Registers R0, R2, R3, R6, R12 are used in the code for 
                       the following operations:
  179 000000E8         ; R0 - No use until the storing of information
  180 000000E8         ; R2 - Used to load every second input in conjction with
                        R1
  181 000000E8         ; R3 - Temporary register to store numbers to be added t
                       o the count
  182 000000E8         ; R6 - Multiple uses as a temporary register
  183 000000E8         ; R12 - Used to load the input once per loop 
  184 000000E8         
  185 000000E8         
  186 000000E8 E59AC000 
                       LOOP    LDR              R12, [R10]
  187 000000EC E1CC3007        BIC              R3, R12, R7
  188 000000F0 E0844003        ADD              R4, R4, R3
  189 000000F4         
  190 000000F4         ;This loop is special as it includes an instruction to a
                       llow counting 
  191 000000F4         ;through through the branch at the end of the code
  192 000000F4         ;as such the proper code segment that has been unrolled 
                       starts at the next copy 
  193 000000F4         
  194 000000F4         ;The basic algorithm used is:
  195 000000F4 E59A2000        LDR              R2, [R10]   ;Load the data
  196 000000F8 E1C2300C        BIC              R3, R2, R12 ;Bit clear with the
                                                             previous vlaues of
                                                             the input. Thus R3
                                                             will only be 1 if 
                                                            the current value i
                                                            s 1 and the previou
                                                             value 0
  197 000000FC E0844003        ADD              R4, R4, R3  ;Add the number of 
                                                            changes to the coun
                                                            t register, as the 



ARM Macro Assembler    Page 7 


                                                            value will either b
                                                            e 1 (change), or 0 
                                                            (no change)
  198 00000100         
  199 00000100         
  200 00000100         
  201 00000100 E1C76001        BIC              R6, R7, R1  ;This line is the t
                                                            hird instruction of
                                                             the count segment,
                                                             however it referen
                                                            ces to a load from 
                                                            before the branch i
                                                            nstruction
  202 00000104         
  203 00000104         
  204 00000104 E59A1000        LDR              R1, [R10]   ;this is another co
                                                            py of my algorithm,
                                                             however it use a d
                                                            ifferent register t
                                                            o store the value
  205 00000108 E1C13002        BIC              R3, R1, R2  ;make the current v
                                                            alue into the old v
                                                            alue
  206 0000010C E0844003        ADD              R4, R4, R3
  207 00000110         
  208 00000110 E0844006        ADD              R4, R4, R6  ;This line is the f
                                                            inal instruction of
                                                             the count segment,
                                                             however it referen
                                                            ces to a load from 
                                                            before the branch i
                                                            nstruction
  209 00000114         
  210 00000114         
  211 00000114 E59A2000        LDR              R2, [R10]
  212 00000118 E1C23001        BIC              R3, R2, R1
  213 0000011C E0844003        ADD              R4, R4, R3
  214 00000120         
  215 00000120 E0046389        AND              R6, R4, R9, lsl #7 ;This is the
                                                             first part of my o
                                                            verflow intruction,
                                                             these intructions 
                                                            are interpersed bet
                                                            ween my basic algor
                                                            ithm. 
  216 00000124         ;combined my overflow check looks like this:
  217 00000124         ;AND  R6, R4, R9, lsl #7  This is a bit mask to check if
                        the 8th bit of each count is 1. It uses a mask of 0x808
                       08080 which is created by a shift of 0x01010101
  218 00000124         ;AND  R4, R4, R11    This clears this 'carry' bit to sto
                       p any actual overflow between counts occuring
  219 00000124         ;ADD  R5, R5, R6, lsr #7  This adds the overflow to the 
                       overflow count, similar to the changes being added to th
                       e original count
  220 00000124         
  221 00000124 E59A1000        LDR              R1, [R10]
  222 00000128 E004400B        AND              R4, R4, R11 ;This is the second
                                                             part of my overflo
                                                            w intruction



ARM Macro Assembler    Page 8 


  223 0000012C E1C13002        BIC              R3, R1, R2
  224 00000130 E0844003        ADD              R4, R4, R3
  225 00000134         
  226 00000134 E59A2000        LDR              R2, [R10]
  227 00000138 E1C23001        BIC              R3, R2, R1
  228 0000013C E0844003        ADD              R4, R4, R3
  229 00000140         
  230 00000140 E08553A6        ADD              R5, R5, R6, lsr #7 ;This is the
                                                             last part of my ov
                                                            erflow intruction
  231 00000144         
  232 00000144 E59A1000        LDR              R1, [R10]
  233 00000148 E1C13002        BIC              R3, R1, R2
  234 0000014C E0844003        ADD              R4, R4, R3
  235 00000150         
  236 00000150 E0056389        AND              R6, R5, R9, lsl #7 ;As the coun
                                                            t can go up to 20 0
                                                            00 000, the overflo
                                                            w may be too small 
                                                            and so that may ove
                                                            rflow too
  237 00000154         ;Thus I use three registers for counting and have to che
                       ck for overflow on the second register 
  238 00000154         ;This is done in the same way as the original overflow, 
                       using different registers
  239 00000154 E59A2000        LDR              R2, [R10]
  240 00000158 E005500B        AND              R5, R5, R11 ;This is the second
                                                             part of my overflo
                                                            w's overflow instru
                                                            ction
  241 0000015C E1C23001        BIC              R3, R2, R1
  242 00000160 E0844003        ADD              R4, R4, R3
  243 00000164         
  244 00000164 E59A1000        LDR              R1, [R10]
  245 00000168 E1C13002        BIC              R3, R1, R2
  246 0000016C E0844003        ADD              R4, R4, R3
  247 00000170         
  248 00000170 E08883A6        ADD              R8, R8, R6, lsr #7 ;This is the
                                                             last part of my ov
                                                            erflow's overflow i
                                                            nstruction
  249 00000174         
  250 00000174 E59A2000        LDR              R2, [R10]
  251 00000178 E3590000        CMP              R9, #0x0000000 ;Here I check if
                                                             the IRQ function h
                                                            as changed a variab
                                                            le, I chose to use 
                                                            the bit mask in cas
                                                            e the interrupt occ
                                                            urs early on as I d
                                                            o not want to read 
                                                            the input at that p
                                                            oint    
  252 0000017C E1C23001        BIC              R3, R2, R1
  253 00000180 E0844003        ADD              R4, R4, R3
  254 00000184         
  255 00000184         
  256 00000184 E59A1000        LDR              R1, [R10]
  257 00000188 E1C13002        BIC              R3, R1, R2



ARM Macro Assembler    Page 9 


  258 0000018C E0844003        ADD              R4, R4, R3
  259 00000190         
  260 00000190 E59A7000        LDR              R7, [R10]   ;This is my pre-bra
                                                            nch load, the actua
                                                            l processing instru
                                                            ctions are located 
                                                            earlier in the loop
                                                            . 
  261 00000194         ;I have done this so that the maximum delay between the 
                       ends two consecutive LDR commands is 7
  262 00000194         ;As the sampling rate has to be twice the frequency, the
                        time period of sampling (in my case loading) must be do
                       uble the time period of the input
  263 00000194         ;Thus my lowest time period that I can read is 12
  264 00000194         
  265 00000194 1AFFFFD3        BNE              LOOP        ;Loop End. If the e
                                                            arlier compare intr
                                                            uction was false (a
                                                            nd so Z=0) it will 
                                                            loop back to the be
                                                            ginning
  266 00000198         
  267 00000198 E0046389        AND              R6, R4, R9, lsl #7 ;one last ch
                                                            eck for overflow
  268 0000019C E004400B        AND              R4, R4, R11 ;in case IRQ occure
                                                            d between the last 
                                                            overflow check and 
                                                            the compare instruc
                                                            tion
  269 000001A0 E08553A6        ADD              R5, R5, R6, lsr #7
  270 000001A4         
  271 000001A4 E0056389        AND              R6, R5, R9, lsl #7
  272 000001A8 E005500B        AND              R5, R5, R11
  273 000001AC E08883A6        ADD              R8, R8, R6, lsr #7
  274 000001B0         
  275 000001B0         
  276 000001B0 E59F00B8        LDR              R0, =P0COUNT ;This segment, sor
                                                            ts the pieces of th
                                                            e three count regis
                                                            ter into a single n
                                                            umber for P0Count
  277 000001B4 E204607F        AND              R6, R4, #0x0000007F ;This is do
                                                            ne by selecting onl
                                                            y the relevant bits
                                                            , shifting them int
                                                            o the correct place
                                                             
  278 000001B8 E205707F        AND              R7, R5, #0x0000007F ;These piec
                                                            es are added onto r
                                                            egister R9 and stor
                                                            es this value in th
                                                            e memory location
  279 000001BC E20810FF        AND              R1, R8, #0x000000FF ;I don't ch
                                                            eck bit 8 as it is 
                                                            my 'carry bit' and 
                                                            is going to be 0 in
                                                             all cases 
  280 000001C0 E1A09006        MOV              R9, R6
  281 000001C4 E0899387        ADD              R9, R9, R7, lsl #7



ARM Macro Assembler    Page 10 


  282 000001C8 E0899701        ADD              R9, R9, R1, lsl #14
  283 000001CC E5809000        STR              R9, [R0]
  284 000001D0         
  285 000001D0 E59F009C        LDR              R0, =P1COUNT ;This segment is a
                                                             repeat of the prev
                                                            ious, only using a 
                                                            different amount of
                                                             shifts and
  286 000001D4 E2046C7F        AND              R6, R4, #0x00007F00 ;Selecting 
                                                            a different part of
                                                             the counts
  287 000001D8 E2057C7F        AND              R7, R5, #0x00007F00 
                                                            ;Repeat for P2 
  288 000001DC E2081CFF        AND              R1, R8, #0x0000FF00
  289 000001E0 E1A09426        MOV              R9, R6, lsr #8
  290 000001E4 E08990A7        ADD              R9, R9, R7, lsr #1
  291 000001E8 E0899301        ADD              R9, R9, R1, lsl #6
  292 000001EC E5809000        STR              R9, [R0]
  293 000001F0         
  294 000001F0 E59F0080        LDR              R0, =P2COUNT ;Repeat for P2 
  295 000001F4 E204687F        AND              R6, R4, #0x007F0000
  296 000001F8 E205787F        AND              R7, R5, #0x007F0000
  297 000001FC E20818FF        AND              R1, R8, #0x00FF0000
  298 00000200 E1A09826        MOV              R9, R6, lsr #16
  299 00000204 E08994A7        ADD              R9, R9, R7, lsr #9
  300 00000208 E0899121        ADD              R9, R9, R1, lsr #2
  301 0000020C E5809000        STR              R9, [R0]
  302 00000210         
  303 00000210 E59F0064        LDR              R0, =P3COUNT ;Repeat for P3 
  304 00000214 E204647F        AND              R6, R4, #0x7F000000
  305 00000218 E205747F        AND              R7, R5, #0x7F000000
  306 0000021C E20814FF        AND              R1, R8, #0xFF000000
  307 00000220 E1A09C26        MOV              R9, R6, lsr #24
  308 00000224 E08998A7        ADD              R9, R9, R7, lsr #17
  309 00000228 E0899521        ADD              R9, R9, R1, lsr #10
  310 0000022C E5809000        STR              R9, [R0]
  311 00000230         
  312 00000230         
  313 00000230         
  314 00000230         
  315 00000230 EA000006        B                LOOP_END    ;End of program 
  316 00000234         
  317 00000234         
  318 00000234         
  319 00000234 E3A09000 
                       ISR_FUNC
                               MOV              R9, #0x00000000 ;I change the b
                                                            it mask to 0. The r
                                                            easoning behind thi
                                                            s is outlined on li
                                                            ne 231
  320 00000238         
  321 00000238 E25EF004        SUBS             pc, R14, #4 ;exit IRQ mode and 
                                                            return to the place
                                                             where the interrup
                                                            t occured   
  322 0000023C         
  323 0000023C         
  324 0000023C         ;-------------------------------------------------------



ARM Macro Assembler    Page 11 


                       -------------------------------------
  325 0000023C         ; PARAMETERS TO CONTROL SIMULATION, VALUES MAY BE CHANGE
                       D TO IMPLEMENT DIFFERENT TESTS
  326 0000023C         ;-------------------------------------------------------
                       -------------------------------------
  327 0000023C         SIMCONTROL
  328 0000023C 00274F80 
                       SIM_TIME
                               DCD              2576256     ; length of simulat
                                                            ion in cycles (100M
                                                            Hz clock)
  329 00000240 00000056 
                       P0_PERIOD
                               DCD              86          ; bit 0 input perio
                                                            d in cycles
  330 00000244 0000003C 
                       P1_PERIOD
                               DCD              60          ; bit 8 input perio
                                                            d in cycles
  331 00000248 0000000C 
                       P2_PERIOD
                               DCD              12          ; bit 16 input peri
                                                            od in cycles
  332 0000024C 0000001A 
                       P3_PERIOD
                               DCD              26          ; bit 24 input peri
                                                            od in cycles
  333 00000250         ;---------------------DO NOT CHANGE AFTER THIS COMMENT--
                       -------------------------------------
  334 00000250         ;-------------------------------------------------------
                       -------------------------------------
  335 00000250         ;-------------------------------------------------------
                       ------------------------   ------------
  336 00000250 E3A00C7F 
                       LOOP_END
                               MOV              R0, #0x7f00
  337 00000254 E5900000        LDR              R0, [R0]    ; read memory locat
                                                            ion 7f00 to stop si
                                                            mulation
  338 00000258 EAFFFFFE 
                       STOP    B                STOP
  339 0000025C         ;-------------------------------------------------------
                       ----------------------
  340 0000025C 00000000 
              FEFEFEFE 
              11111111 
              01010101 
              7F7F7F7F 
              00000000 
              00000000 
              00000000 
              00000000         AREA             DATA, READWRITE
  341 00000000         
  342 00000000 00000000 
                       P0COUNT DCD              0
  343 00000004 00000000 
                       P1COUNT DCD              0
  344 00000008 00000000 
                       P2COUNT DCD              0



ARM Macro Assembler    Page 12 


  345 0000000C 00000000 
                       P3COUNT DCD              0
  346 00000010         ;-------------------------------------------------------
                       -----------------------   
  347 00000010                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
  348 00000000         
  349 00000000         Stack_Mem
                               SPACE            USR_Stack_Size
  350 00000000         __initial_sp
                               SPACE            ISR_Stack_Size
  351 00000100         
  352 00000100         Stack_Top
  353 00000100         
  354 00000100         
  355 00000100                 END                          ; Mark end of file
Command Line: --debug --xref --apcs=interwork --depend=countfreq.d -ocountfreq.
o -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SET
A 1" --list=countfreq.lst countfreq.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ACBASE 00000020

Symbol: ACBASE
   Definitions
      At line 48 in file countfreq.s
   Uses
      None
Comment: ACBASE unused
DAbt_Addr 00000038

Symbol: DAbt_Addr
   Definitions
      At line 55 in file countfreq.s
   Uses
      At line 42 in file countfreq.s
Comment: DAbt_Addr used once
DAbt_Handler 00000050

Symbol: DAbt_Handler
   Definitions
      At line 62 in file countfreq.s
   Uses
      At line 55 in file countfreq.s
      At line 62 in file countfreq.s

FIQ_Addr 00000040

Symbol: FIQ_Addr
   Definitions
      At line 57 in file countfreq.s
   Uses
      At line 46 in file countfreq.s
Comment: FIQ_Addr used once
FIQ_Handler 00000054

Symbol: FIQ_Handler
   Definitions
      At line 63 in file countfreq.s
   Uses
      At line 57 in file countfreq.s
      At line 63 in file countfreq.s

PAbt_Addr 00000034

Symbol: PAbt_Addr
   Definitions
      At line 54 in file countfreq.s
   Uses
      At line 41 in file countfreq.s
Comment: PAbt_Addr used once
PAbt_Handler 0000004C

Symbol: PAbt_Handler
   Definitions
      At line 61 in file countfreq.s
   Uses
      At line 54 in file countfreq.s
      At line 61 in file countfreq.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 34 in file countfreq.s
   Uses
      None
Comment: RESET unused
Reset_Addr 00000028

Symbol: Reset_Addr
   Definitions
      At line 51 in file countfreq.s
   Uses
      At line 38 in file countfreq.s
Comment: Reset_Addr used once
SCONTR 00000024

Symbol: SCONTR
   Definitions
      At line 49 in file countfreq.s
   Uses
      None
Comment: SCONTR unused
SWI_Addr 00000030

Symbol: SWI_Addr
   Definitions
      At line 53 in file countfreq.s
   Uses
      At line 40 in file countfreq.s
Comment: SWI_Addr used once
SWI_Handler 00000048

Symbol: SWI_Handler
   Definitions
      At line 60 in file countfreq.s
   Uses
      At line 53 in file countfreq.s
      At line 60 in file countfreq.s

Undef_Addr 0000002C

Symbol: Undef_Addr
   Definitions
      At line 52 in file countfreq.s
   Uses
      At line 39 in file countfreq.s
Comment: Undef_Addr used once
Undef_Handler 00000044

Symbol: Undef_Handler
   Definitions
      At line 59 in file countfreq.s
   Uses
      At line 52 in file countfreq.s
      At line 59 in file countfreq.s

Vectors 00000000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: Vectors
   Definitions
      At line 38 in file countfreq.s
   Uses
      None
Comment: Vectors unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARMuser 00000000

Symbol: ARMuser
   Definitions
      At line 66 in file countfreq.s
   Uses
      None
Comment: ARMuser unused
Addr_EXTINT 00000010

Symbol: Addr_EXTINT
   Definitions
      At line 73 in file countfreq.s
   Uses
      At line 84 in file countfreq.s
Comment: Addr_EXTINT used once
Addr_EXTMODE 00000008

Symbol: Addr_EXTMODE
   Definitions
      At line 71 in file countfreq.s
   Uses
      At line 98 in file countfreq.s
Comment: Addr_EXTMODE used once
Addr_IOPIN 00000014

Symbol: Addr_IOPIN
   Definitions
      At line 77 in file countfreq.s
   Uses
      None
Comment: Addr_IOPIN unused
Addr_PINSEL0 0000000C

Symbol: Addr_PINSEL0
   Definitions
      At line 72 in file countfreq.s
   Uses
      At line 95 in file countfreq.s
Comment: Addr_PINSEL0 used once
Addr_VicIntEn 00000004

Symbol: Addr_VicIntEn
   Definitions
      At line 70 in file countfreq.s
   Uses
      At line 92 in file countfreq.s
Comment: Addr_VicIntEn used once
FIOMASK 0000009C

Symbol: FIOMASK
   Definitions
      At line 149 in file countfreq.s
   Uses
      At line 160 in file countfreq.s
Comment: FIOMASK used once
FIOPIN 000000A0

Symbol: FIOPIN



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 150 in file countfreq.s
   Uses
      At line 172 in file countfreq.s
Comment: FIOPIN used once
IRQ_Addr 00000000

Symbol: IRQ_Addr
   Definitions
      At line 68 in file countfreq.s
   Uses
      At line 44 in file countfreq.s
Comment: IRQ_Addr used once
ISR_FUNC 00000234

Symbol: ISR_FUNC
   Definitions
      At line 319 in file countfreq.s
   Uses
      At line 87 in file countfreq.s
Comment: ISR_FUNC used once
ISR_FUNC1 00000018

Symbol: ISR_FUNC1
   Definitions
      At line 82 in file countfreq.s
   Uses
      At line 68 in file countfreq.s
Comment: ISR_FUNC1 used once
LOOP 000000E8

Symbol: LOOP
   Definitions
      At line 186 in file countfreq.s
   Uses
      At line 265 in file countfreq.s
Comment: LOOP used once
LOOP_END 00000250

Symbol: LOOP_END
   Definitions
      At line 336 in file countfreq.s
   Uses
      At line 315 in file countfreq.s
Comment: LOOP_END used once
P0_PERIOD 00000240

Symbol: P0_PERIOD
   Definitions
      At line 329 in file countfreq.s
   Uses
      None
Comment: P0_PERIOD unused
P1_PERIOD 00000244

Symbol: P1_PERIOD
   Definitions
      At line 330 in file countfreq.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: P1_PERIOD unused
P2_PERIOD 00000248

Symbol: P2_PERIOD
   Definitions
      At line 331 in file countfreq.s
   Uses
      None
Comment: P2_PERIOD unused
P3_PERIOD 0000024C

Symbol: P3_PERIOD
   Definitions
      At line 332 in file countfreq.s
   Uses
      None
Comment: P3_PERIOD unused
Reset_Handler 00000030

Symbol: Reset_Handler
   Definitions
      At line 89 in file countfreq.s
   Uses
      At line 51 in file countfreq.s
Comment: Reset_Handler used once
SCS_REGISTER 00000098

Symbol: SCS_REGISTER
   Definitions
      At line 148 in file countfreq.s
   Uses
      At line 156 in file countfreq.s
Comment: SCS_REGISTER used once
SIMCONTROL 0000023C

Symbol: SIMCONTROL
   Definitions
      At line 327 in file countfreq.s
   Uses
      At line 49 in file countfreq.s
Comment: SIMCONTROL used once
SIM_TIME 0000023C

Symbol: SIM_TIME
   Definitions
      At line 328 in file countfreq.s
   Uses
      None
Comment: SIM_TIME unused
START 000000A4

Symbol: START
   Definitions
      At line 154 in file countfreq.s
   Uses
      At line 129 in file countfreq.s
Comment: START used once
STOP 00000258



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: STOP
   Definitions
      At line 338 in file countfreq.s
   Uses
      At line 338 in file countfreq.s
Comment: STOP used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 340 in file countfreq.s
   Uses
      None
Comment: DATA unused
P0COUNT 00000000

Symbol: P0COUNT
   Definitions
      At line 342 in file countfreq.s
   Uses
      At line 48 in file countfreq.s
      At line 276 in file countfreq.s

P1COUNT 00000004

Symbol: P1COUNT
   Definitions
      At line 343 in file countfreq.s
   Uses
      At line 285 in file countfreq.s
Comment: P1COUNT used once
P2COUNT 00000008

Symbol: P2COUNT
   Definitions
      At line 344 in file countfreq.s
   Uses
      At line 294 in file countfreq.s
Comment: P2COUNT used once
P3COUNT 0000000C

Symbol: P3COUNT
   Definitions
      At line 345 in file countfreq.s
   Uses
      At line 303 in file countfreq.s
Comment: P3COUNT used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 347 in file countfreq.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 349 in file countfreq.s
   Uses
      None
Comment: Stack_Mem unused
Stack_Top 00000100

Symbol: Stack_Top
   Definitions
      At line 352 in file countfreq.s
   Uses
      At line 103 in file countfreq.s
Comment: Stack_Top used once
__initial_sp 00000000

Symbol: __initial_sp
   Definitions
      At line 350 in file countfreq.s
   Uses
      None
Comment: __initial_sp unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABT_Stack_Size 00000000

Symbol: ABT_Stack_Size
   Definitions
      At line 26 in file countfreq.s
   Uses
      At line 32 in file countfreq.s
      At line 113 in file countfreq.s

EINT2 00000010

Symbol: EINT2
   Definitions
      At line 69 in file countfreq.s
   Uses
      At line 91 in file countfreq.s
Comment: EINT2 used once
FIQ_Stack_Size 00000000

Symbol: FIQ_Stack_Size
   Definitions
      At line 27 in file countfreq.s
   Uses
      At line 32 in file countfreq.s
      At line 118 in file countfreq.s

F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 12 in file countfreq.s
   Uses
      At line 106 in file countfreq.s
      At line 111 in file countfreq.s
      At line 116 in file countfreq.s
      At line 121 in file countfreq.s
      At line 126 in file countfreq.s

IRQ_Stack_Size 00000080

Symbol: IRQ_Stack_Size
   Definitions
      At line 28 in file countfreq.s
   Uses
      At line 32 in file countfreq.s
      At line 123 in file countfreq.s

ISR_Stack_Size 00000100

Symbol: ISR_Stack_Size
   Definitions
      At line 32 in file countfreq.s
   Uses
      At line 350 in file countfreq.s
Comment: ISR_Stack_Size used once
I_Bit 00000080

Symbol: I_Bit
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 11 in file countfreq.s
   Uses
      At line 106 in file countfreq.s
      At line 111 in file countfreq.s
      At line 116 in file countfreq.s
      At line 121 in file countfreq.s

Mode_ABT 00000017

Symbol: Mode_ABT
   Definitions
      At line 7 in file countfreq.s
   Uses
      At line 111 in file countfreq.s
Comment: Mode_ABT used once
Mode_FIQ 00000011

Symbol: Mode_FIQ
   Definitions
      At line 4 in file countfreq.s
   Uses
      At line 116 in file countfreq.s
Comment: Mode_FIQ used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 5 in file countfreq.s
   Uses
      At line 121 in file countfreq.s
Comment: Mode_IRQ used once
Mode_SVC 00000013

Symbol: Mode_SVC
   Definitions
      At line 6 in file countfreq.s
   Uses
      At line 126 in file countfreq.s
Comment: Mode_SVC used once
Mode_SYS 0000001F

Symbol: Mode_SYS
   Definitions
      At line 9 in file countfreq.s
   Uses
      None
Comment: Mode_SYS unused
Mode_UND 0000001B

Symbol: Mode_UND
   Definitions
      At line 8 in file countfreq.s
   Uses
      At line 106 in file countfreq.s
Comment: Mode_UND used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 3 in file countfreq.s
   Uses
      None
Comment: Mode_USR unused
SVC_Stack_Size 00000080

Symbol: SVC_Stack_Size
   Definitions
      At line 25 in file countfreq.s
   Uses
      At line 32 in file countfreq.s
      At line 128 in file countfreq.s

UND_Stack_Size 00000000

Symbol: UND_Stack_Size
   Definitions
      At line 24 in file countfreq.s
   Uses
      At line 32 in file countfreq.s
      At line 108 in file countfreq.s

USR_Stack_Size 00000000

Symbol: USR_Stack_Size
   Definitions
      At line 29 in file countfreq.s
   Uses
      At line 349 in file countfreq.s
Comment: USR_Stack_Size used once
17 symbols
390 symbols in table
